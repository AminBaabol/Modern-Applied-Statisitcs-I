head(clouds)
# A linear regression model
clouds_formula <- rainfall ~ seeding +
+ seeding:(sne + cloudcover + prewetness + echomotion) +
+ time
clouds_lm <- lm(clouds_formula, data = clouds)
cat("Linear Regression Model with all explantory variables")
## Linear Regression Model with all explantory variables
summary(clouds_lm)
clouds_lm2 <- lm(rainfall ~ sne, data=clouds)
cat("Linear Regression Model with S-Ne as a predictor")
## Linear Regression Model with S-Ne as a predictor
summary(clouds_lm2)
# A median regression model
median.model <- rq(rainfall ~ sne, data = clouds, tau = 0.5)
cat("Median Regression Model")
## Median Regression Model
summary(median.model)
## Plotting the models using base R
layout(matrix(1:2,ncol=2))
psymb <- as.numeric(clouds$seeding)
plot(rainfall ~ sne,
data = clouds,
pch = psymb,
xlab = "S-NE Criterion",
ylab = "Rainfall",
main = "Linear Regression Plot")
abline(lm(rainfall ~ sne,
data = clouds,
subset = seeding == "no"))
abline(lm(rainfall~ sne,
data = clouds,
subset = seeding == "yes"),
lty = 2)
legend("topright",
legend = c("No seeding", "Seeding"),
pch = 1:2,
lty = 1:2,
bty = "n")
plot(rainfall ~ sne,
data = clouds,
pch = psymb,
xlab = "S-NE Criterion",
ylab = "Rainfall", main = "Median Regression Plot")
abline(rq(rainfall ~ sne,
data = clouds,
tau = 0.50,
subset = seeding == "no"))
abline(rq(rainfall ~ sne,
data = clouds,
tau = 0.50,
subset = seeding == "yes"),
lty = 2)
legend("topright",
legend = c("No seeding", "Seeding"),
pch = 1:2,
lty = 1:2,
bty = "n")
# Plotting the model Using ggplot
l.plot <- ggplot(data = clouds,
aes(x = sne,
y = rainfall,
col = seeding)) +
geom_point() +
geom_smooth(method = "lm",se = FALSE) +
labs(title = "Linear Regression Plot",
x = "S-NE",
y = "Rainfall")
m.plot <- ggplot(data = clouds,
aes(x = sne,
y = rainfall,
col = seeding)) +
geom_point() +
labs(title = "Median Regression Plot",
x = "S-NE",
y = "Rainfall") +
stat_quantile(quantiles = c(0.5), method = "rq")
grid.arrange(l.plot, m.plot, ncol = 2)
data("bodyfat")
#Regression tree approach
#Fitting the model
set.seed(1234)
Regression.Tree <- rpart(DEXfat ~ age +
waistcirc +
hipcirc +
elbowbreadth +
kneebreadth, data = bodyfat,
control = rpart.control(minsplit = 10))
#Plot the initial decision tree model
plot(main = "Figure 2.1a: Non-Pruned Decision Tree Model",
as.party(Regression.Tree),
gp = gpar(fontsize = 8),
tp_args = (list(id = FALSE)))
#Locating the lowest cp to see if it needs pruning
opt <- which.min(Regression.Tree$cptable[,"xerror"])
cp <- Regression.Tree$cptable[opt, "CP"]
#opt
#printing the cp table
#print(Regression.Tree$cptable)
#Plot the CP Table
plotcp(Regression.Tree,
main = "CP vs. Error",
col = "darkred",
cp = 19)
#constructing a pruned regression tree model using the extracted cp
Pruned.Regression.Tree <- prune(Regression.Tree, cp = cp)
#Pruned regression tree model summary
summary(Pruned.Regression.Tree)
#Plot the pruned regression tree model
plot(main = "Figure 2.1b:Pruned Decison Tree Model",
as.party(Pruned.Regression.Tree),
gp = gpar(fontsize = 8),
tp_args = (list(id = FALSE)))
#Predicting DEXfat using the pruned regression tree model
Pruned.RegressionTree.Predict <- predict(Pruned.Regression.Tree,
newdata = bodyfat)
#Median Quantile Regression
#Fitting the median Regression model
Median.Regression.Model <- rq(DEXfat ~ age +
waistcirc +
hipcirc +
elbowbreadth +
kneebreadth,
data=bodyfat,
tau = 0.50)
Median.Regression.Model
#Median regression model summary
summary(Median.Regression.Model)
#Predicting DEXfat using the median regression model
Median.Regression.Predict <- predict(Median.Regression.Model,
newdata = bodyfat)
#Plot the predicted values of the pruned regression tree model
plot(Pruned.RegressionTree.Predict ~ DEXfat,
data = bodyfat,
xlab = "Observed",
ylab = "Predicted",
ylim = range(bodyfat$DEXfat),
xlim = range(bodyfat$DEXfat),
main = "Figure 2.2a:Pruned Regression Tree Predicted vs. Observed",
col = "navyblue")
abline(a = 0, b = 1)
#Plot the predicted values of the median regression model
plot(Median.Regression.Predict ~ DEXfat,
data = bodyfat,
xlab = "Observed",
ylab = "Predicted",
ylim = range(bodyfat$DEXfat),
xlim = range(bodyfat$DEXfat),
main = "Figure 2.2b:Median Regression Predicted vs. Observed",
col = "darkred")
abline(a = 0, b = 1)
#Residuals comparison
#Extract the residuals and the coefficients
Median.Regression.Res <- resid(Median.Regression.Model)
Pruned.RegressionTree.Res <- resid(Pruned.Regression.Tree)
#Regression Tree Residuals
plot(Pruned.RegressionTree.Res,
main = "Figure 2.3a:Pruned Regression Tree Model Residuals")
#Median Regression Residuals
plot(Median.Regression.Res,
main = "Figure 2.3b:Median Regression Model Residuals")
#Create a dataf rame to store the observed, predicted and sse values of the pruned regression tree model
Actual <- bodyfat$DEXfat
Predicted.Prune <- Pruned.RegressionTree.Predict
SSE.Prune <- (Actual - Predicted.Prune)^2
#create a data frame to store the observed, predicted and sse values of the median regression model
Predicted.Median <- Median.Regression.Predict
SSE.Median <- (Actual - Predicted.Median)^2
#Pruned decision tree
Pruned.Model.Table <- data.frame(Actual,Predicted.Prune,SSE.Prune)
#head(Pruned.Model.Table)
#Median regression
Median.Model.Table <- data.frame(Actual,Predicted.Median,SSE.Median)
#head(Median.Model.Table)
#Calculating the MSE of both models
Pruned.RegressionTree.MSE <- mean(Pruned.Model.Table$SSE.Prune)
Median.Regression.MSE <- mean(Median.Model.Table$SSE.Median)
#Constructing a vector/table for the MSE of both models
MSE <- data.frame(Pruned.RegressionTree.MSE,Median.Regression.MSE)
names(MSE) <- c("Regression Tree Model MSE", "Median Regression Model MSE")
MSE
#Choosing an independent variable using the p-value
summary(Median.Regression.Model, se = "nid")
#hip circumference has the lowest p-value
#Fitting the quantile regression
Quantile.Regression <- rq(DEXfat ~ hipcirc,
data = bodyfat,
tau = c(.05,.10,.90,.95))
#Coefficient intensity
coef(Quantile.Regression)
#Plot the linear regression model with all the quantiles inlcuded
#Base R
plot(DEXfat ~ hipcirc,
main = "DEXfat  vs.  Hip Circumference: Base R",
xlab = "Hip Circumference",
ylab = "DEXfat",
col = "black",
pch = 19,
data = bodyfat)
abline(rq(DEXfat ~ hipcirc,
data = bodyfat,
tau = 0.05),
col = "purple")
abline(rq(DEXfat ~ hipcirc,
data = bodyfat,
tau = 0.10),
col = "orange")
abline(rq(DEXfat ~ hipcirc,
data = bodyfat,
tau = 0.90),
col = "blue")
abline(rq(DEXfat ~ hipcirc,
data = bodyfat,
tau = 0.95),
col = "red")
legend("bottomright",
legend = c("5% Quantile",
"10% Quantile",
"90% Quantile",
"95% Quantile"),
fill = c("purple",
"orange",
"blue",
"red"))
#ggplot version
ggplot(data = bodyfat, aes(x = hipcirc, y = DEXfat)) +
geom_point() +
stat_quantile(quantiles = c(.05),
method = 'rq',
aes(colour = '5%')) +
stat_quantile(quantiles = c(.10),
method = 'rq',
aes(colour = '10%')) +
stat_quantile(quantiles = c(.90),
method = 'rq',
aes(colour = '90%')) +
stat_quantile(quantiles = c(.95),
method = 'rq',
aes(colour = '95%')) +
labs(title = "DEXfat  vs.  Hip Circumference: ggplot",
x = "Hip circumference",
y = "DEXfat") +
scale_color_manual(name = "Quantile Percent",
values = c("5%" = "purple",
"10%" = "orange",
"90%" = "blue",
"95%" = "red"))
knit_with_parameters('~/Downloads/AminBaabolHW8.Rmd')
unlink('~/Downloads/AminBaabolHW8_cache', recursive = TRUE)
setwd("~/Downloads")
setwd("~/Desktop/GradSchool/STATS-601 Statistical Programming/Module 7 Quantile Regression/Homework")
knitr::opts_chunk$set(message=F,warning=F,echo=F,fig_height=10,fig_width=7,cache = F)
#Packages used
library("HSAUR3")
library("lattice")
library("party")
library("partykit")
library("TH.data")
library("ipred")
library("rpart")
library("ggplot2")
library("ggdendro")
library("quantreg")
library("gridExtra")
data("clouds")
head(clouds)
# A linear regression model
clouds_formula <- rainfall ~ seeding +
+ seeding:(sne + cloudcover + prewetness + echomotion) +
+ time
clouds_lm <- lm(clouds_formula, data = clouds)
cat("Linear Regression Model with all explantory variables")
## Linear Regression Model with all explantory variables
summary(clouds_lm)
clouds_lm2 <- lm(rainfall ~ sne, data=clouds)
cat("Linear Regression Model with S-Ne as a predictor")
## Linear Regression Model with S-Ne as a predictor
summary(clouds_lm2)
# A median regression model
median.model <- rq(rainfall ~ sne, data = clouds, tau = 0.5)
cat("Median Regression Model")
## Median Regression Model
summary(median.model)
## Plotting the models using base R
layout(matrix(1:2,ncol=2))
psymb <- as.numeric(clouds$seeding)
plot(rainfall ~ sne,
data = clouds,
pch = psymb,
xlab = "S-NE Criterion",
ylab = "Rainfall",
main = "Linear Regression Plot")
abline(lm(rainfall ~ sne,
data = clouds,
subset = seeding == "no"))
abline(lm(rainfall~ sne,
data = clouds,
subset = seeding == "yes"),
lty = 2)
legend("topright",
legend = c("No seeding", "Seeding"),
pch = 1:2,
lty = 1:2,
bty = "n")
plot(rainfall ~ sne,
data = clouds,
pch = psymb,
xlab = "S-NE Criterion",
ylab = "Rainfall", main = "Median Regression Plot")
abline(rq(rainfall ~ sne,
data = clouds,
tau = 0.50,
subset = seeding == "no"))
abline(rq(rainfall ~ sne,
data = clouds,
tau = 0.50,
subset = seeding == "yes"),
lty = 2)
legend("topright",
legend = c("No seeding", "Seeding"),
pch = 1:2,
lty = 1:2,
bty = "n")
# Plotting the model Using ggplot
l.plot <- ggplot(data = clouds,
aes(x = sne,
y = rainfall,
col = seeding)) +
geom_point() +
geom_smooth(method = "lm",se = FALSE) +
labs(title = "Linear Regression Plot",
x = "S-NE",
y = "Rainfall")
m.plot <- ggplot(data = clouds,
aes(x = sne,
y = rainfall,
col = seeding)) +
geom_point() +
labs(title = "Median Regression Plot",
x = "S-NE",
y = "Rainfall") +
stat_quantile(quantiles = c(0.5), method = "rq")
grid.arrange(l.plot, m.plot, ncol = 2)
data("bodyfat")
#Regression tree approach
#Fitting the model
set.seed(1234)
Regression.Tree <- rpart(DEXfat ~ age +
waistcirc +
hipcirc +
elbowbreadth +
kneebreadth, data = bodyfat,
control = rpart.control(minsplit = 10))
#Plot the initial decision tree model
plot(main = "Figure 2.1a: Non-Pruned Decision Tree Model",
as.party(Regression.Tree),
gp = gpar(fontsize = 8),
tp_args = (list(id = FALSE)))
#Locating the lowest cp to see if it needs pruning
opt <- which.min(Regression.Tree$cptable[,"xerror"])
cp <- Regression.Tree$cptable[opt, "CP"]
#opt
#printing the cp table
#print(Regression.Tree$cptable)
#Plot the CP Table
plotcp(Regression.Tree,
main = "CP vs. Error",
col = "darkred",
cp = 19)
#constructing a pruned regression tree model using the extracted cp
Pruned.Regression.Tree <- prune(Regression.Tree, cp = cp)
#Pruned regression tree model summary
summary(Pruned.Regression.Tree)
#Plot the pruned regression tree model
plot(main = "Figure 2.1b:Pruned Decison Tree Model",
as.party(Pruned.Regression.Tree),
gp = gpar(fontsize = 8),
tp_args = (list(id = FALSE)))
#Predicting DEXfat using the pruned regression tree model
Pruned.RegressionTree.Predict <- predict(Pruned.Regression.Tree,
newdata = bodyfat)
#Median Quantile Regression
#Fitting the median Regression model
Median.Regression.Model <- rq(DEXfat ~ age +
waistcirc +
hipcirc +
elbowbreadth +
kneebreadth,
data=bodyfat,
tau = 0.50)
Median.Regression.Model
#Median regression model summary
summary(Median.Regression.Model)
#Predicting DEXfat using the median regression model
Median.Regression.Predict <- predict(Median.Regression.Model,
newdata = bodyfat)
#Plot the predicted values of the pruned regression tree model
plot(Pruned.RegressionTree.Predict ~ DEXfat,
data = bodyfat,
xlab = "Observed",
ylab = "Predicted",
ylim = range(bodyfat$DEXfat),
xlim = range(bodyfat$DEXfat),
main = "Figure 2.2a:Pruned Regression Tree Predicted vs. Observed",
col = "navyblue")
abline(a = 0, b = 1)
#Plot the predicted values of the median regression model
plot(Median.Regression.Predict ~ DEXfat,
data = bodyfat,
xlab = "Observed",
ylab = "Predicted",
ylim = range(bodyfat$DEXfat),
xlim = range(bodyfat$DEXfat),
main = "Figure 2.2b:Median Regression Predicted vs. Observed",
col = "darkred")
abline(a = 0, b = 1)
#Residuals comparison
#Extract the residuals and the coefficients
Median.Regression.Res <- resid(Median.Regression.Model)
Pruned.RegressionTree.Res <- resid(Pruned.Regression.Tree)
#Regression Tree Residuals
plot(Pruned.RegressionTree.Res,
main = "Figure 2.3a:Pruned Regression Tree Model Residuals")
#Median Regression Residuals
plot(Median.Regression.Res,
main = "Figure 2.3b:Median Regression Model Residuals")
#Create a dataf rame to store the observed, predicted and sse values of the pruned regression tree model
Actual <- bodyfat$DEXfat
Predicted.Prune <- Pruned.RegressionTree.Predict
SSE.Prune <- (Actual - Predicted.Prune)^2
#create a data frame to store the observed, predicted and sse values of the median regression model
Predicted.Median <- Median.Regression.Predict
SSE.Median <- (Actual - Predicted.Median)^2
#Pruned decision tree
Pruned.Model.Table <- data.frame(Actual,Predicted.Prune,SSE.Prune)
#head(Pruned.Model.Table)
#Median regression
Median.Model.Table <- data.frame(Actual,Predicted.Median,SSE.Median)
#head(Median.Model.Table)
#Calculating the MSE of both models
Pruned.RegressionTree.MSE <- mean(Pruned.Model.Table$SSE.Prune)
Median.Regression.MSE <- mean(Median.Model.Table$SSE.Median)
#Constructing a vector/table for the MSE of both models
MSE <- data.frame(Pruned.RegressionTree.MSE,Median.Regression.MSE)
names(MSE) <- c("Regression Tree Model MSE", "Median Regression Model MSE")
MSE
#Choosing an independent variable using the p-value
summary(Median.Regression.Model, se = "nid")
#hip circumference has the lowest p-value
#Fitting the quantile regression
Quantile.Regression <- rq(DEXfat ~ hipcirc,
data = bodyfat,
tau = c(.05,.10,.90,.95))
#Coefficient intensity
coef(Quantile.Regression)
#Plot the linear regression model with all the quantiles inlcuded
#Base R
plot(DEXfat ~ hipcirc,
main = "DEXfat  vs.  Hip Circumference: Base R",
xlab = "Hip Circumference",
ylab = "DEXfat",
col = "black",
pch = 19,
data = bodyfat)
abline(rq(DEXfat ~ hipcirc,
data = bodyfat,
tau = 0.05),
col = "purple")
abline(rq(DEXfat ~ hipcirc,
data = bodyfat,
tau = 0.10),
col = "orange")
abline(rq(DEXfat ~ hipcirc,
data = bodyfat,
tau = 0.90),
col = "blue")
abline(rq(DEXfat ~ hipcirc,
data = bodyfat,
tau = 0.95),
col = "red")
legend("bottomright",
legend = c("5% Quantile",
"10% Quantile",
"90% Quantile",
"95% Quantile"),
fill = c("purple",
"orange",
"blue",
"red"))
#ggplot version
ggplot(data = bodyfat, aes(x = hipcirc, y = DEXfat)) +
geom_point() +
stat_quantile(quantiles = c(.05),
method = 'rq',
aes(colour = '5%')) +
stat_quantile(quantiles = c(.10),
method = 'rq',
aes(colour = '10%')) +
stat_quantile(quantiles = c(.90),
method = 'rq',
aes(colour = '90%')) +
stat_quantile(quantiles = c(.95),
method = 'rq',
aes(colour = '95%')) +
labs(title = "DEXfat  vs.  Hip Circumference: ggplot",
x = "Hip circumference",
y = "DEXfat") +
scale_color_manual(name = "Quantile Percent",
values = c("5%" = "purple",
"10%" = "orange",
"90%" = "blue",
"95%" = "red"))
